#!/usr/bin/env python

import numpy as np

import rospy
from nav_msgs.srv import GetPlan
from ros_numpy import numpify
from geometry_msgs.msg import Point, Vector3, PoseStamped, TransformStamped
from tf2_ros import Buffer, TransformListener, TransformException, StaticTransformBroadcaster


class RVizGoalParser:
    def __init__(self):
        self.local_frame = rospy.get_param('~local_frame', 'local_utm')
        self.target_altitude = rospy.get_param('~target_altitude', 0)
        self.tolerance = rospy.get_param('~tolerance', 32)

        self.tf_pub = StaticTransformBroadcaster()

        self.tf = Buffer()
        self.tf_sub = TransformListener(self.tf)

        self.get_plan = None
        self.wait_for_get_plan()

        self.nav_pose_sub = rospy.Subscriber('move_base_simple/goal', PoseStamped, self.nav_pose_cb)

    def wait_for_get_plan(self):
        '''
        Wait for GetPlan service to be available.
        '''
        if self.get_plan is not None:
            return
        rospy.wait_for_service('get_plan')
        self.get_plan = rospy.ServiceProxy('get_plan', GetPlan)
        rospy.logwarn(f'Using GetPlan service: {self.get_plan.resolved_name}')

    def nav_pose_cb(self, msg):
        '''
        Callback for move_base_simple/goal topic
        
        Parameters
        ----------
        msg : PoseStamped
            PoseStamped message containing the goal pose
        '''
        self.wait_for_get_plan()

        rviz_goal = numpify(msg.pose.position).reshape(3,1)

        # Transform goal to target frame
        try:
            target_goal = self.tf.lookup_transform(self.local_frame, msg.header.frame_id, rospy.Time())
        except TransformException as e:
            rospy.logerr(f'Transform failed: {e}')
            return
        target_goal = numpify(target_goal.transform)
        target_point = np.dot(target_goal, np.vstack([rviz_goal, 1]))[:3]
        target_point[2] = self.target_altitude
        rospy.loginfo(f'Target goal: {target_point.ravel().tolist()}')

        # Publish tf transform
        transform = TransformStamped()
        transform.header.stamp = rospy.Time.now()
        transform.header.frame_id = self.local_frame
        transform.child_frame_id = 'goal'
        transform.transform.translation = Vector3(*target_point)
        transform.transform.rotation.w = 1
        self.tf_pub.sendTransform([transform])

        # Create goal pose
        goal = PoseStamped()
        goal.header.stamp = rospy.Time.now()
        goal.header.frame_id = self.local_frame
        goal.pose.position = Point(*target_point)
        goal.pose.orientation.w = 1

        # Create start pose
        start = PoseStamped()
        start.header.stamp = rospy.Time.now()
        start.header.frame_id = self.local_frame
        start.pose.position = Point(float('nan'), float('nan'), float('nan'))  # Use current position
        start.pose.orientation.w = 1

        # Call GetPlan service
        try:
            res = self.get_plan(start, goal, self.tolerance)
        except rospy.ServiceException as e:
            rospy.logerr(f'GetPlan service failed: {e}')
            self.get_plan = None
            return

        if len(res.plan.poses) == 0:
            rospy.logwarn('No plan found.')
            return


def main():
    rospy.init_node('goal_parser')
    node = RVizGoalParser()
    rospy.spin()

if __name__ == '__main__':
    main()
