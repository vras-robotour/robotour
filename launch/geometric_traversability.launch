<?xml version="1.0" encoding="UTF-8" ?>
<launch>
    <arg name="robot" default="spot-3"/><group if="$(eval {'ctu-robot': 0, 'flip': 0, 'marv-robot': 0, 'spot-3': 0}[robot])"/>
    <arg name="nodelet_manager" default="geometric_traversability_manager"/>
    <arg name="nodelet_action" default="load"/>
    <arg name="height" default="128"/>
    <arg if="$(eval 'spot' in robot)" name="width" default="1024"/>
    <arg if="$(eval 'spot' not in robot)" name="width" default="256"/>
    <arg name="azimuth_only" default="$(eval height == 128)"/>
    <arg name="fov_elevation" default="90"/>

    <arg name="input" default="points_filtered" if="$(eval arg('robot') == 'ctu-robot')"/>
    <arg name="input" default="TODO" if="$(eval arg('robot') == 'flip')"/>
    <arg name="input" default="points_filtered_jetson" if="$(eval arg('robot') == 'marv-robot')"/>
    <arg name="input" default="TODO" if="$(eval arg('robot') == 'spot-3')"/>

    <node if="$(eval nodelet_manager == 'geometric_traversability_manager')"
          name="$(arg nodelet_manager)" pkg="nodelet" type="nodelet" args="manager"
          respawn="true" respawn_delay="1.0" output="log">
        <param name="num_worker_threads" value="16"/>
    </node>

    <node name="max_filter_projection" pkg="nodelet" type="nodelet"
          args="$(arg nodelet_action) cloud_proc/projection $(arg nodelet_manager)"
          respawn="true" respawn_delay="1.0" output="log">
        <rosparam subst_value="true">
            height: $(arg height)
            width: $(arg width)
            keep: 3  <!-- max depth -->
            azimuth_only: $(arg azimuth_only)
        </rosparam>
        <param unless="$(arg azimuth_only)" name="fov_elevation" value="$(eval arg('fov_elevation') / 180. * 3.1415)"/>

        <remap from="input" to="$(arg input)"/>
        <remap from="output" to="max_points"/>
    </node>

    <node name="cloud_range_filter_max" pkg="nodelet" type="nodelet"
          args="$(arg nodelet_action) cloud_proc/range_filter $(arg nodelet_manager)"
          respawn="true" respawn_delay="1.0" output="log">
        <rosparam>
            field: x
            max: 4.0
        </rosparam>
        <remap from="input" to="max_points"/>
        <remap from="output" to="max_points_in_range"/>
    </node>

    <node name="cloud_voxel_filter_max" pkg="nodelet" type="nodelet"
          args="$(arg nodelet_action) cloud_proc/voxel_filter $(arg nodelet_manager)"
          respawn="true" respawn_delay="1.0" output="log">
        <rosparam>
            field: x
            grid: 0.125
            zero_valid: false
        </rosparam>
        <remap from="input" to="max_points_in_range"/>
        <remap from="output" to="max_points_125mm"/>
    </node>

    <node name="traversability_estimation" pkg="nodelet" type="nodelet"
          args="$(arg nodelet_action) naex/traversability $(arg nodelet_manager)"
          respawn="true" respawn_delay="1.0" output="screen">
        <rosparam>
            min_z: -1.5
            max_z: 0.5
            support_radius: 0.25
            min_support: 3
            inclination_radius: 0.4
            clearance_radius: 0.7
            clearance_low: 0.1
            clearance_high: 0.6
            # inclination_weight: 1.637  <!-- 35 deg = unit cost -->
            # normal_std_weight: 10.0  <!-- 0.10 m = unit cost -->
            # obstacle_weight: 0.2  <!-- 5 obstacle points = unit cost -->
            inclination_weight: 1.637  <!-- 35 deg = unit cost -->
            normal_std_weight: 100.0  <!-- 0.05 m = unit cost -->
            obstacle_weight: 0.5  <!-- 2 obstacle points = unit cost -->
            # inclination_weight: 5.0  <!-- 35 deg = unit cost -->
            # normal_std_weight: 30.0  <!-- 0.10 m = unit cost -->
            # obstacle_weight: 2.0  <!-- 5 obstacle points = unit cost -->
            remove_low_support: true
            fixed_frame: odom
            timeout: 1.0
        </rosparam>
        <remap from="input" to="max_points_125mm"/>
        <remap from="output" to="geometric_traversability"/>
    </node>
</launch>
